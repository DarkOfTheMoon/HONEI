/* vim: set sw=4 sts=4 et foldmethod=syntax ft=cpp : */

/*
 * Copyributght (c) 2007 Danny van Dyk <danny.dyk@uni-dortmund.de>
 *
 * This file is part of the LA C++ library. LibLa is free software;
 * you can redistribute it and/or modify it under the terms of the GNU General
 * Public License version 2, as published by the Free Software Foundation.
 *
 * LibLa is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <cell/cell.hh>
#include <cell/libutil/allocator.hh>

#include <spu_intrinsics.h>
#include <spu_mfcio.h>

using namespace honei;

@FUNC@

int main(unsigned long long spe_id, EffectiveAddress argp, EffectiveAddress envp)
{
    printf("SPE: Kernel started!\n");
    Environment env __attribute__((aligned(16)));
    Instruction instructions[8] __attribute__((aligned(16)));

    // Set up our environment
    mfc_get(&env, envp, multiple_of_sixteen(sizeof(Environment)), 0, 0, 0);
    mfc_write_tag_mask(1 << 0);
    mfc_read_tag_status_any();
    allocator::init(env);

    spu_read_signal1();
    printf("SPE: Received initial signal 1!\n");

    mfc_get(instructions, argp, sizeof(Instruction) * 8, 0, 0, 0);

    do
    {
        mfc_write_tag_mask(1 << 0);
        mfc_read_tag_status_any();

        for (unsigned long instruction_index(0) ; instruction_index != 8 ; ++instruction_index)
        {
            unsigned long long retval;
            switch (instructions[instruction_index].opcode)
            {
@BODY@
                case oc_noop:
                    break;

                default:
                    printf("SPE: Unknown opcode!\n");
                    spu_write_out_intr_mbox(km_unknown_opcode);
                    spu_stop(0);
            }
        }

        printf("SPE: Waiting for follow up signal1\n");
        spu_read_signal1();
        printf("SPE: Got follow up signal1\n");

        mfc_get(instructions, argp, sizeof(Instruction) * 8, 0, 0, 0);
    }
    while (true);

    return 0;
}
