/* vim: set sw=4 sts=4 et foldmethod=syntax ft=cpp : */

@HEADER@

/*
 * Copyright (c) 2007 Danny van Dyk <danny.dyk@uni-dortmund.de>
 *
 * This file is part of the LA C++ library. LibLa is free software;
 * you can redistribute it and/or modify it under the terms of the GNU General
 * Public License version 2, as published by the Free Software Foundation.
 *
 * LibLa is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <honei/backends/cell/cell.hh>
#include <honei/backends/cell/spe/libla/operations.hh>
#include <honei/backends/cell/spe/libmath/operations.hh>
#include <honei/backends/cell/spe/libswe/operations.hh>
#include <honei/backends/cell/spe/libutil/allocator.hh>
#include <honei/backends/cell/spe/libutil/transfer.hh>
#include <honei/backends/cell/spe/libutil/debug.hh>

#include <spu_intrinsics.h>
#include <spu_mfcio.h>

using namespace honei::cell;

@FUNCTIONS@

#ifdef DEBUG
union ContextData
{
    void * untyped;
    vector unsigned int vectorised;
};

ContextData context_array[14] = {
    { reinterpret_cast<void *>(0x12345678) },
    { reinterpret_cast<void *>(0x9ABCDEF0) },
    { reinterpret_cast<void *>(0x12345678) },
    { reinterpret_cast<void *>(0x9ABCDEF0) },
    { reinterpret_cast<void *>(0x12345678) },
    { reinterpret_cast<void *>(0x9ABCDEF0) },
    { reinterpret_cast<void *>(0x12345678) },
    { reinterpret_cast<void *>(0x9ABCDEF0) },
    { reinterpret_cast<void *>(0x12345678) },
    { reinterpret_cast<void *>(0x9ABCDEF0) },
    { reinterpret_cast<void *>(0x12345678) },
    { reinterpret_cast<void *>(0x9ABCDEF0) },
    { reinterpret_cast<void *>(0x12345678) },
    { reinterpret_cast<void *>(0x9ABCDEF0) },
};
ContextData * context_data = &context_array[1];
#define CONTEXT \
    asm("brsl %0, 1f\n" \
        "1: nop\n" \
        "stqd %0, 0(%1)\n" \
        : /* none */ \
        : "r" (0), "r" (context_array) \
        : /* none */ \
    );
#endif

int main(unsigned long long spe_id, EffectiveAddress argp, EffectiveAddress envp)
{
    Environment env __attribute__((aligned(16)));
    Instruction instructions[8] __attribute__((aligned(16)));

    // Set up our environment
    mfc_get(&env, envp, multiple_of_sixteen(sizeof(Environment)), 0, 0, 0);
    mfc_write_tag_mask(1 << 0);
    mfc_read_tag_status_any();
    init_alloc(env);

    spu_read_signal1();

    mfc_get(instructions, argp, sizeof(Instruction) * 8, 0, 0, 0);

    do
    {
        mfc_write_tag_mask(1 << 0);
        mfc_read_tag_status_any();

        for (unsigned long instruction_index(0) ; instruction_index != 8 ; ++instruction_index)
        {
            unsigned long long retval;
            switch (instructions[instruction_index].opcode)
            {
@BODY@
                case oc_noop:
                    break;

                default:
                    spu_write_out_intr_mbox(km_unknown_opcode);
                    spu_stop(0);
            }
        }
        spu_read_signal1();

        mfc_get(instructions, argp, sizeof(Instruction) * 8, 0, 0, 0);
    }
    while (true);

    return 0;
}
