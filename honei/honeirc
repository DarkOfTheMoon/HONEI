# This is the reference configuration file for HONEI
# All used configuration keys are listed here, accompanied by
# default values.

# Util
##########
thread::stacksize = 0
profiler::output = /dev/null
log::categories = none

# LA
#ell thread count, pick 0 for heuristic configuration
ell::threads = 1

# CUDA
######
# Number of GPU's
cuda::num_gpu = 2

# Size of one Block in a Grid
cuda::difference_two_float = 128
cuda::difference_two_double = 128

cuda::dot_product_two_float = 128
cuda::dot_product_two_float_grid = 16
cuda::dot_product_two_double = 128
cuda::dot_product_two_double_grid = 16

cuda::element_inverse_one_float = 128

cuda::element_product_two_float = 128
cuda::element_product_two_double = 128

cuda::norm_l2_one_float = 128
cuda::norm_l2_one_float_grid = 16
cuda::norm_l2_one_double = 128
cuda::norm_l2_one_double = 16

cuda::product_bmdv_q1_float = 128
cuda::product_bmdv_q1_double = 128

cuda::product_smell_dv_float = 128
cuda::product_smell_dv_double = 128

cuda::scaled_sum_two_float = 128
cuda::scaled_sum_two_double = 128
cuda::scaled_sum_three_float = 128
cuda::scaled_sum_three_double = 128

cuda::scale_one_float = 128
cuda::scale_one_double = 128

cuda::sum_two_float = 128
cuda::sum_two_double = 128

cuda::prolongation_float = 64

cuda::restriction_float = 64

cuda::eq_dist_grid_float = 128

cuda::collide_stream_grid_float = 128

cuda::force_grid_float = 128

cuda::up_vel_dir_grid = 128

cuda::extraction_grid = 128

cuda::SolverLabsweGrid::patch_count = 2

# Cell
######

# Number of usable SPEs
cell::number-of-spes = 6

# Number of used SPEs on a per-operation base
cell::sum_dense_dense_float = 4
cell::sum_dense_dense_double = 4

cell::sum_dense_scalar_float = 4
cell::sum_dense_scalar_double = 4

cell::difference_dense_dense_float = 4
cell::difference_dense_dense_double = 4

cell::dot_product_dense_dense_float = 4
cell::dot_product_dense_dense_double = 4

cell::element_product_dense_dense_float = 4
cell::element_product_dense_dense_double = 4

cell::scaled_sum_dense_dense_float = 4
cell::scaled_sum_dense_dense_double = 4

cell::scale_dense_float = 4
cell::scale_dense_double = 4

cell::element_inverse_float = 4

cell::norm_l_two_dense_float = 4
cell::norm_l_two_dense_double = 4
cell::norm_l_one_dense_float = 4
cell::norm_l_one_dense_double = 4

cell::reduction_sum_dense_float = 4
cell::reduction_sum_dense_double = 4

cell::product_dense_matrix_dense_vector_float = 4

cell::product_banded_matrix_dense_vector_float = 4
cell::product_banded_matrix_dense_vector_double = 4

cell::extraction_grid_float = 5

# MultiCore
###########

# Number of concurrent worker threads to use
# will be regarded only if the value is greater
# that the number of available processing units.
mc::num_threads = 4

# Wheather to enable work stealing (1 = true, 0 = false)
mc::work_stealing = 0

# Wheather to use affinity (1 = true, 0 = false)
mc::affinity = 1

# List type to use in multicore backend (0 = STL, 1 = HONEI)
# note that affinity without work stealing is always 0
mc::listtype = 0

# Default DispatchPolicy (anycore, alternating, linear)
# note that without affinity the policy is always anycore
mc::dispatch = alternating

# Partition size and partition count settings on a per_operation base
mc::Difference(DVCB,DVCB)::min_part_size = 16
mc::Difference(DVCB,DVCB)::max_count = 4

mc::Difference(DVB,DVB)::min_part_size = 16
mc::Difference(DVB,DVB)::max_count = 4

mc::difference(DVCB,SV)::min_part_size = 16
mc::difference(DVCB,SV)::max_count = 4

mc::difference(BM,BM)::min_part_size = 16
mc::difference(BM,BM)::max_count = 4

mc::difference(DM,BM)::min_part_size = 16
mc::difference(DM,BM)::max_count = 4

mc::difference(DM,DM)::min_part_size = 16
mc::difference(DM,DM)::max_count = 4

mc::difference(DM,SM)::min_part_size = 16
mc::difference(DM,SM)::max_count = 4

mc::difference(SM,SM)::min_part_size = 16
mc::difference(SM,SM)::max_count = 4

mc::difference(SM,BM)::min_part_size = 16
mc::difference(SM,BM)::max_count = 4

mc::Sum(DVCB,DVCB)::min_part_size = 16
mc::Sum(DVCB,DVCB)::max_count = 4

mc::Sum(DVB,DVB)::min_part_size = 16
mc::Sum(DVB,DVB)::max_count = 4

mc::sum(DVCB,SV)::min_part_size = 16
mc::sum(DVCB,SV)::max_count = 4

mc::sum(BM,BM)::min_part_size = 16
mc::sum(BM,BM)::max_count = 4

mc::sum(DM,BM)::min_part_size = 16
mc::sum(DM,BM)::max_count = 4

mc::sum(DM,DM)::min_part_size = 16
mc::sum(DM,DM)::max_count = 4

mc::sum(DM,SC)::min_part_size = 16
mc::sum(DM,SC)::max_count = 4

mc::sum(DVCB,SC)::min_part_size = 16
mc::sum(DVCB,SC)::max_count = 4

mc::sum(DM,SM)::min_part_size = 16
mc::sum(DM,SM)::max_count = 4

mc::sum(SM,SM)::min_part_size = 16
mc::sum(SM,SM)::max_count = 4

mc::ElementProduct(DVB,DVB)::min_part_size = 16
mc::ElementProduct(DVB,DVB)::max_count = 4

mc::ElementProduct(DVCB,DVCB)::min_part_size = 16
mc::ElementProduct(DVCB,DVCB)::max_count = 4

mc::element_product(SV,DVCB)::min_part_size = 16
mc::element_product(SV,DVCB)::max_count = 4

mc::element_product(BM,BM)::min_part_size = 16
mc::element_product(BM,BM)::max_count = 4

mc::element_product(DM,DM)::min_part_size = 16
mc::element_product(DM,DM)::max_count = 4

mc::element_product(SM,DM)::min_part_size = 16
mc::element_product(SM,DM)::max_count = 4

mc::element_product(SM,SM)::min_part_size = 16
mc::element_product(SM,SM)::max_count = 4

mc::rt_sum(BM)::min_part_size = 16
mc::rt_sum(BM)::max_count = 4

mc::rt_sum(DM)::min_part_size = 16
mc::rt_sum(DM)::max_count = 4

mc::rt_sum(SM)::min_part_size = 16
mc::rt_sum(SM)::max_count = 4

mc::rt_sum(DVCB)::min_part_size = 16
mc::rt_sum(DVCB)::max_count = 4

mc::rt_sum(DVS)::min_part_size = 16
mc::rt_sum(DVS)::max_count = 4

mc::rt_sum(SV)::min_part_size = 16
mc::rt_sum(SV)::max_count = 4

mc::rt_max(BM)::min_part_size = 16
mc::rt_max(BM)::max_count = 4

mc::rt_max(DM)::min_part_size = 16
mc::rt_max(DM)::max_count = 4

mc::rt_max(SM)::min_part_size = 16
mc::rt_max(SM)::max_count = 4

mc::rt_max(DVCB)::min_part_size = 16
mc::rt_max(DVCB)::max_count = 4

mc::rt_max(DVS)::min_part_size = 16
mc::rt_max(DVS)::max_count = 4

mc::rt_max(SV)::min_part_size = 16
mc::rt_max(SV)::max_count = 4

mc::rt_min(BM)::min_part_size = 16
mc::rt_min(BM)::max_count = 4

mc::rt_min(DM)::min_part_size = 16
mc::rt_min(DM)::max_count = 4

mc::rt_min(SM)::min_part_size = 16
mc::rt_min(SM)::max_count = 4

mc::rt_min(DVCB)::min_part_size = 16
mc::rt_min(DVCB)::max_count = 4

mc::rt_min(DVS)::min_part_size = 16
mc::rt_min(DVS)::max_count = 4

mc::rt_min(SV)::min_part_size = 16
mc::rt_min(SV)::max_count = 4

mc::element_inverse(DM)::min_part_size = 16
mc::element_inverse(DM)::max_count = 4

mc::element_inverse(SM)::min_part_size = 16
mc::element_inverse(SM)::max_count = 4

mc::element_inverse(DVCB)::min_part_size = 16
mc::element_inverse(DVCB)::max_count = 4

mc::element_inverse(DVS)::min_part_size = 16
mc::element_inverse(DVS)::max_count = 4

mc::element_inverse(SV)::min_part_size = 16
mc::element_inverse(SV)::max_count = 4

mc::product(DM,DM)::min_tile_size = 512

mc::product(DM,DVCB)::min_part_size = 16
mc::product(DM,DVCB)::max_count = 4

mc::product(BM,DVCB)::min_part_size = 16
mc::product(BM,DVCB)::max_count = 4

mc::product(SM,DM)::min_part_size = 16
mc::product(SM,DM)::max_count = 4

mc::Product(DV,SMELL,DV)::max_count = 4

mc::dot_product(DVCB,DVCB)::min_part_size = 16
mc::dot_product(DVCB,DVCB)::max_count = 4

mc::dot_product(SV,DVCB)::min_part_size = 16
mc::dot_product(SV,DVCB)::max_count = 4

mc::scale(DM)::min_part_size = 16
mc::scale(DM)::max_count = 4

mc::scale(SM)::min_part_size = 16
mc::scale(SM)::max_count = 4

mc::scale(BM)::min_part_size = 16
mc::scale(BM)::max_count = 4

mc::scale(DVCB)::min_part_size = 16
mc::scale(DVCB)::max_count = 4

mc::scale(DVS)::min_part_size = 16
mc::scale(DVS)::max_count = 4

mc::scale(SV)::min_part_size = 16
mc::scale(SV)::max_count = 4

mc::ScaledSum(DVCB,DVCB,DT)::min_part_size = 16
mc::ScaledSum(DVCB,DVCB,DT)::max_count = 4

mc::ScaledSum(DVCB,DVCB,DVCB)::min_part_size = 16
mc::ScaledSum(DVCB,DVCB,DVCB)::max_count = 4

mc::SolverLabsweGrid::patch_count = 4
